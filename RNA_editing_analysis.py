# -*- coding: utf-8 -*-
"""Task 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bZ3qNupRd6pchQwHpub1NpnlPhK1Ot4V
"""

# Step 1: Load Libraries
import pandas as pd
import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt

# Step 2: Load Data
from google.colab import files
uploaded = files.upload()

genes_of_interest = pd.read_csv('genes_of_interest.tsv', sep='\t')
mettl3_1 = pd.read_csv('Mettl3_1.tsv', sep='\t')
mettl3_2 = pd.read_csv('Mettl3_2.tsv', sep='\t')
mettl3_3 = pd.read_csv('Mettl3_3.tsv', sep='\t')
mettl3_ctrl_1 = pd.read_csv('Mettl3_ctrl_1.tsv', sep='\t')
mettl3_ctrl_2 = pd.read_csv('Mettl3_ctrl_2.tsv', sep='\t')
mettl3_ctrl_3 = pd.read_csv('Mettl3_ctrl_3.tsv', sep='\t')

# Step 3: Preprocess Data to Calculate Editing Levels
def calculate_editing_level(df):
    df['Editing_Level'] = df['Count_G'] / df['Good_depth']
    return df

mettl3_1 = calculate_editing_level(mettl3_1)
mettl3_2 = calculate_editing_level(mettl3_2)
mettl3_3 = calculate_editing_level(mettl3_3)
mettl3_ctrl_1 = calculate_editing_level(mettl3_ctrl_1)
mettl3_ctrl_2 = calculate_editing_level(mettl3_ctrl_2)
mettl3_ctrl_3 = calculate_editing_level(mettl3_ctrl_3)

# Step 4: Combine Data for Statistical Analysis
data = {
    'Mettl3': [mettl3_1, mettl3_2, mettl3_3],
    'Control': [mettl3_ctrl_1, mettl3_ctrl_2, mettl3_ctrl_3]
}

def mean_editing_change(data, genes_of_interest):
    results = {'Gene': [], 'Mean_Change': [], 'P_Value': []}
    for gene in genes_of_interest['gene_name']:
        gene_data = genes_of_interest[genes_of_interest['gene_name'] == gene]
        chr_ = gene_data['chr'].values[0]
        start = gene_data['start'].values[0]
        end = gene_data['end'].values[0]

        mettl3_editing = []
        ctrl_editing = []

        for condition, dfs in data.items():
            for df in dfs:
                gene_df = df[(df['#CHR'] == chr_) & (df['POS'] >= start) & (df['POS'] <= end)]
                if condition == 'Mettl3':
                    mettl3_editing.extend(gene_df['Editing_Level'].dropna().values)
                else:
                    ctrl_editing.extend(gene_df['Editing_Level'].dropna().values)

        mean_change = np.mean(mettl3_editing) - np.mean(ctrl_editing)
        p_value = stats.ttest_ind(mettl3_editing, ctrl_editing, equal_var=False).pvalue

        results['Gene'].append(gene)
        results['Mean_Change'].append(mean_change)
        results['P_Value'].append(p_value)

    return pd.DataFrame(results)

# Calculate mean editing change and p-values
results = mean_editing_change(data, genes_of_interest)

# Step 5: Overall Mean Editing Change
overall_mettl3 = np.concatenate([df['Editing_Level'].dropna().values for df in data['Mettl3']])
overall_ctrl = np.concatenate([df['Editing_Level'].dropna().values for df in data['Control']])
overall_mean_change = np.mean(overall_mettl3) - np.mean(overall_ctrl)
overall_p_value = stats.ttest_ind(overall_mettl3, overall_ctrl, equal_var=False).pvalue

print(f"Overall Mean Editing Change: {overall_mean_change}")
print(f"Overall P-Value: {overall_p_value}")

# Display results for individual genes
print(results)

# Step 6: Visualization
plt.figure(figsize=(10, 6))
plt.bar(results['Gene'], results['Mean_Change'], color='blue', alpha=0.7)
plt.xlabel('Gene')
plt.ylabel('Mean Editing Change')
plt.title('Mean Editing Change Between Conditions for Each Gene')
plt.xticks(rotation=90)
plt.show()